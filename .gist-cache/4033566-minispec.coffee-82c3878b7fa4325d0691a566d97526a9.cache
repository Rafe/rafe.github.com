{EventEmitter} = require 'events'
async = require 'async'

#utils
color = (code)-> (text = "")-> code + text + '\u001b[0m'
red = color('\u001b[31m')
green = color('\u001b[32m')
yellow = color('\u001b[33m')
pluralize = (count, noun)-> if count > 1 then noun + 's' else noun
indent = (level)-> ('  ' for i in [0...level]).join('')

class Suite extends EventEmitter
  constructor: (@title, @parent)->
    @errors = 0
    @tests = []
    @childs = []
    @parent?.childs.push @
    @level = @parent?.level + 1 or 0

    @on 'start', => @report yellow @title
    @delegate ['before', 'after'] if @parent?
    @on 'result', (test, err)=>
      if err?
        @errors += 1
        @report red "  âœ— #{test.title} (#{err})"
      else
        @report green "  âœ“ #{test.title}"
    @on 'end', =>
      count = @tests.length
      errors = @errors

      (reduce = (suites)->
        suites.forEach (suite)->
          count += suite.tests.length
          errors += suite.errors
          reduce suite.childs if suite.childs?
      )(@childs)

      console.log yellow "run #{count} #{pluralize(count, 'test') } , #{count - errors} success, #{errors} failed"

  delegate: (events)->
    events.forEach (event)=>
      @on event, ()=> @parent?.emit event

  report: (text)-> console.log indent(@level) + text

  run: ->
    @emit 'start'
    async.forEachSeries @tests, (test, next)=>
      callback = =>
        @emit('after')
        @emit('result', test)
        next()

      try
        @emit('before')
        if test.isAsync
          test.fn callback
        else
          test.fn()
          callback()
      catch err
        @emit('result', test, err)
        next()
    , =>
      @childs.forEach (spec)-> spec.run()
      @emit 'end' unless @parent?

class Runner
  constructor: (context)->
    suites = []
    context.it = (desc, fn)->
      suites[0].tests.push title: desc, fn: fn, isAsync: !!fn.length
    context.before = (fn)->
      suites[0].on 'before', fn
    context.after = (fn)->
      suites[0].on 'after', fn
    context.describe = (title, block)->
      suite = new Suite(title, suites[0])
      suites.unshift(suite)
      block()
      suites.shift()
      suite.run() if suites.length is 0

new Runner(global or window)
